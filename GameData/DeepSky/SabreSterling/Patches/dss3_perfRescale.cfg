// Insert SD node with desired parameter into target parts if and after Sigma Dimensions
@PART[dss?_sabre*|dss?_nacelle*|dss2_scimitar]:AFTER[SigDim2]
{
	#@SigmaDimensions {}
	@SigmaDimensions
	{
		!Resize = del
		!Atmosphere = del
		!dayLengthMultiplier = del
		!landscape = del
		!groundTiling = del
		!atmoASL = del
		!tempASL = del
		!atmoTopLayer = del
		!atmoVisualEffect = del
		!lightRange = del
		!scanAltitude = del
		!geeASLmultiplier = del
		!resizeScatter = del
		!CustomSoISize = del
		!CustomRingSize = del
		!reEntryHeat = del
		!resizeBuildings = del
	}
}

// Modify part(s) once they have this node and if the node has matching value
// This pass seems to not like targeting non-integer values

// Will respond to 3.2x scale and above
@PART[dss2_sabre|dss2_sabre_ram|dss3_sabre|dss3_sabre_ram]:HAS[@SigmaDimensions:HAS[#Rescale[>3]]]:AFTER[SigDim2]
{
	@MODULE[ModuleEnginesFX]:HAS[#engineID[AirBreathing]]
	{
		@velCurve
		{
			!key,* = nope
			key = 0 1 0 -1.061599
			key = 0.7 1.8 2.801642 2.290406
			key = 2.2 4 3.887193 3.887193
			key = 4 8.5 0 0
			key = 5 7.3 -2.831749 -2.831749
			key = 6.4 3 -5.260566 -5.260566
			key = 7.2 0 -0.02420209 0
		}
	}
}
@PART[dss2_scimitar]:HAS[@SigmaDimensions:HAS[#Rescale[>3]]]:AFTER[SigDim2]
{
	@MODULE[ModuleEnginesFX]:HAS[#engineID[Dry]]
	{
		@velCurve
		{
			!key,* = nope
			key = 0 1 0 -1.061599
			key = 0.7 1.8 2.801642 2.290406
			key = 2.2 4 3.887193 3.887193
			key = 4 8.5 0 0
			key = 5 7.3 -2.831749 -2.831749
			key = 6.4 3 -5.260566 -5.260566
			key = 7.2 0 -0.02420209 0
		}
	}
}

// Skylon's LOX is said to be super or ultra compressed to occupy such little tank volume in the real craft and yet be sufficient to accelerate to orbit. To emulate this without making KSP craft incredibly massive or defy tank volume conventions, the intercooler will break conservation of mass as long as it has MillPower and IntakeAir. For fairness sake the MillPower intake needs to be minded and closed at the opportune time in order to sustain this effect in the upper atmosphere where intakes fail and bleed out.

// Respond to 2.5x. Integers only
@PART[dss*_nacelle*]:HAS[@SigmaDimensions:HAS[#Rescale[>2],#Rescale[<3]]]:AFTER[SigDim2]
{
	@description ^= :$: Recalibrated for 2.5x system.
	@MODULE[ModuleResourceConverter]
	{
		// At stock scale, Oxidizer net gain is halved. Restore it now.
		@OUTPUT_RESOURCE
		{
			@Ratio *= 2
		}
	}
}

// Respond to 3.2x. Integers only
@PART[dss*_nacelle*]:HAS[@SigmaDimensions:HAS[#Rescale[>3],#Rescale[<6]]]:AFTER[SigDim2]
{
	@description ^= :$: Recalibrated for 3.2x system.
	@MODULE[ModuleResourceConverter]
	{
		// Halve and tune MillPower requirement, restore pre-halved stock-scale IntakeAir requirement
		@INPUT_RESOURCE:HAS[#ResourceName[MillPower]]
		{
			@Ratio /= 2.4
		}
		@INPUT_RESOURCE:HAS[#ResourceName[IntakeAir]]
		{
			@Ratio /= 2.4
		}
		// At stock scale, Oxidizer net gain is halved. Restore it now.
		@OUTPUT_RESOURCE
		{
			@Ratio *= 2
		}
	}
}

// Respond to 6.4x and above
@PART[dss*_nacelle*]:HAS[@SigmaDimensions:HAS[#Rescale[>6],#Rescale[<10]]]:AFTER[SigDim2]
{
	@description ^= :$: Recalibrated for 6.4x system.
	@MODULE[ModuleResourceConverter]
	{
		// Further trim MillPower and IntakeAir requirements.
		@INPUT_RESOURCE:HAS[#ResourceName[MillPower]]
		{
			@Ratio /= 3.4
		}
		@INPUT_RESOURCE:HAS[#ResourceName[IntakeAir]]
		{
			@Ratio /= 3.4
		}
		// At stock scale, Oxidizer net gain is halved. Restore it now.
		@OUTPUT_RESOURCE
		{
			@Ratio *= 2
		}
	}
}

// Respond to RSS
@PART[dss*_nacelle*]:HAS[@SigmaDimensions:HAS[#Rescale[>9]]]:AFTER[SigDim2]
{
	@description ^= :$: Recalibrated for real scale system.
	@MODULE[ModuleResourceConverter]
	{
		// Further trim MillPower and IntakeAir requirements.
		@INPUT_RESOURCE:HAS[#ResourceName[MillPower]]
		{
			@Ratio /= 4.2
		}
		@INPUT_RESOURCE:HAS[#ResourceName[IntakeAir]]
		{
			@Ratio /= 4.2
		}
		// At stock scale, Oxidizer net gain is halved. Restore it now.
		@OUTPUT_RESOURCE
		{
			@Ratio *= 2
		}
	}
}

// Respond to JNSQ
@PART[dss*_nacelle*]:NEEDS[JNSQ]
{
	@description ^= :$: Recalibrated for 2.7x system.
	@MODULE[ModuleResourceConverter]
	{
		// At stock scale, Oxidizer net gain is halved. Restore it now.
		@OUTPUT_RESOURCE
		{
			@Ratio *= 2
		}
	}
}